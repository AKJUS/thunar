2005-06-29	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-location-buttons.c: Make this behave like GtkFileChooser
	  again.

2005-06-28	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-volume-bsd.c, thunar-vfs/thunar-vfs-volume.c:
	  Remove the GObject properties from the ThunarVfsVolume interface.

2005-06-26	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-info.{c,h}: Do not automatically determine the
	  link target for ThunarVfsInfo objects. Instead, we'll add a method
	  to ThunarVfsInfo later, so modules can do this on-demand. This speeds
	  up loading directories with lots of symlinks within.
	* TODO: Remove the ThunarVfsInfo symlink item.

2005-06-26	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-uri.{c,h}: Don't use a GObject for the
	  ThunarVfsURI class. GObject is really overhead here, as we don't need
	  anything of whats provided by GObject.
	* TODO: Add note about missing GValue handling for ThunarVfsURI.
	* TODO: Add note to fix ThunarVfsInfo to not implicitly query the
	  link target.
	* thunar-vfs/*.[ch], thunar/*.[ch]: Use thunar_vfs_uri_unref() and
	  thunar_vfs_uri_ref() instead of g_object_unref() and g_object_ref(),
	  as ThunarVfsURI is no longer a GObject derived type.
	* thunar/thunar-window.c: Make loading new directories look and feel
	  "smoother". Still not perfect.

2005-06-25	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-local-file.c: Use a static variable for the VFS monitor
	  instead of a class variable, that never gets freed with static types.
	* thunar/thunar-favourites-model.c: Watch the files in the favourites
	  list for changes, so that folders that no longer exists are
	  automatically removed from the list.

2005-06-25	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-navigator.c(thunar_navigator_get_type): Do not require
	  derived classes to inherit GtkWidget. This enables us to let arbitrary
	  classes implement the ThunarNavigator interface and therefore reduce
	  the amount of hardcoded knowledge in ThunarWindow.
	* thunar/thunar-side-pane.c(thunar_side_pane_get_type): Require derived
	  classes to inhert GtkWidget.

2005-06-25	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-details-view.c(thunar_details_view_init): Use a
	  GtkCellRendererText instead of an ExoCellRendererEllipsizedText
	  for the name column.
	* thunar/thunar-details-view.c, thunar/thunar-icon-view.c: Set proper
	  ATK name and descriptions here.

2005-06-25	Benedikt Meurer <benny@xfce.org>

	* thunar/main.c(main): Disable thread support for now, as it's not used
	  and just slows down stuff.
	* thunar/thunar-file.{c,h}, thunar/thunar-local-file.{c,h},
	  thunar/thunar-local-folder.c, thunar/thunar-trash-file.c: Watch local
	  directories and trashed files for changes.

2005-06-25	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-location-buttons.c
	  (thunar_location_buttons_set_current_directory): Don't display the
	  real root node - the 'computer:'-node - if a sub-node is active. So
	  currently we have four distinctive possible roots for the location
	  buttons bar, which are the home directory of the user, the file system
	  root node ('file:/'), the trash root ('trash:') and the real computer
	  root node ('computer:'), which are checked in the given order.
	* thunar/thunar-list-model.c(thunar_list_model_get_value): Use slightly
	  larger icons for the details view.
	* thunar/thunar-window.c: Add preliminary menu support with 'Close'
	  and 'Go up'.

2005-06-24	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-uri.{c,h}: Add support for the 'computer://'
	  URI.
	* thunar/thunar-trash-folder.c, thunar/thunar-local-folder.c,
	  thunar/thunar-folder.c: Drop the GObject properties, as they are
	  mostly useless here.
	* thunar/main.c(main): Use thunar_vfs_uri_new() for the optional
	  command line parameter to be able to open arbitrary URIs from the
	  command line.
	* thunar/Makefile.am: Add new class ThunarComputerFolder to the build
	  framework.
	* thunar/thunar-computer-folder.{c,h}: Add ThunarComputerFolder class,
	  which implements the 'computer:' URI. This vfolder is the root of all
	  other root folders, currently 'file:/' and 'trash:'.
	* thunar/thunar-file.{c,h}, thunar/thunar-folder.c,
	  thunar/thunar-list-model.c, thunar/thunar-local-file.c,
	  thunar/thunar-local-folder.c, thunar/thunar-statusbar.c,
	  thunar/thunar-trash-file.c, thunar/thunar-trash-folder.c: Add support
	  for the 'computer:' vfolder as overall root node. Rearrange the
	  get_size() method to be able to support objects for which no size
	  is known, currently vfolders and directories in general. The virtual
	  get_mime_info() method now automatically takes a reference on the
	  returned object for the caller.

2005-06-24	Benedikt Meurer <benny@xfce.org>

	* configure.in.in: Add check for localtime_r.
	* thunar/thunar-file.{c,h}: Add support to query accessed, changed and
	  modified dates of ThunarFiles.
	* thunar/thunar-local-file.c, thunar/thunar-trash-file.c: Implement
	  the virtual get_date() method.
	* thunar/thunar-list-model.{c,h}: Add new columns accessed date,
	  modified date and mime type. Fix the sorting for the mime comment
	  column.
	* thunar/thunar-details-view.c: Display type and date modified columns
	  as well.

2005-06-23	Benedikt Meurer <benny@xfce.org>

	* docs/papers/HackingOnThunar.odt, docs/papers/Makefile.am,
	  configure.in.in, docs/Makefile.am: Add initial draft of the "Hacking
	  on Thunar" paper.

2005-06-22	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-local-file.c, thunar/thunar-local-folder.c: If for
	  some reason the constructor fails, we need to make sure to handle
	  the floating reference correctly, therefore we call gtk_object_sink()
	  instead of g_object_unref() in this case now.

2005-06-22	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-file.c, thunar/thunar-local-folder.c: Add an assertion
	  to verify that an object has a floating reference before we call
	  gtk_object_sink() on it.

2005-06-22	Benedikt Meurer <benny@xfce.org>

	* TODO: Addd new TODO items and remove solved issues.
	* thunar/Makefile.am: Add new class ThunarTrashFile to the build
	  framework.
	* thunar-vfs/thunar-vfs-monitor.c(thunar_vfs_monitor_add_info): Do not
	  use kevent for symlinks, it's way easier to watch them using regular
	  polling. This shouldn't be a problem anyways, as watching symlinks
	  is not a common case.
	* thunar-vfs/thunar-vfs-trash.{c,h}: Add functionality to handle trash:
	  URIs and determine the real path for a file in a particular trash
	  can.
	* thunar-vfs/thunar-vfs-trash.c(thunar_vfs_trash_manager_get_trashes):
	  Fix a typo where the order of arguments to the g_list_prepend()
	  function was wrong.
	* thunar/thunar-trash-file.{c,h}: Add a ThunarTrashFile class, which
	  represents a trashed file.
	* thunar/thunar-trash-folder.c: Add support for listing the contents
	  of the various trash cans, and also provide a simple proxy mechanism,
	  that automatically forwards the constructor invokation to the
	  ThunarTrashFile class if required. The trash can handling must be
	  improved, see bug #1027.

2005-06-21	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-window.c(thunar_window_set_current_directory): Use
	  thunar_file_open_as_folder() to open new folders.
	* thunar/thunar-folder.{c,h}: ThunarFolder is now an interface, which
	  can be implemented in different ways.
	* thunar/thunar-local-folder.{c,h}: The previous ThunarFolder is now
	  named ThunarLocalFolder.
	* thunar/thunar-file.{c,h}: Add thunar_file_open_as_folder() virtual
	  method, which allows the ThunarFile implementation to choose an
	  appropriate ThunarFolder implementation and thereby removes the
	  need for the surrounding modules to "guess" the correct ThunarFolder.
	* thunar/thunar-local-file.c: Implement the open_as_folder() method
	  for local files by simply instantiating a ThunarLocalFolder on the
	  file in question.
	* thunar/thunar-trash-folder.{c,h}: The ThunarTrashFile class is now
	  named ThunarTrashFolder as it really represents the trash toplevel
	  folder. It also implements the ThunarFolder interface now. The real
	  folder implementation is missing currently.
	* thunar/Makefile.am: Sync the build framework with the changes
	  described above.

2005-06-20	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-monitor.c(thunar_vfs_monitor_event): Remove
	  unused variables.
	* thunar/thunar-folder.c: Apply the same optimization concerning signal
	  id lookups and closure generations as done with ThunarListModel
	  earlier.
	* thunar/thunar-folder.c: Actually react to events on the corresponding
	  file. We still need a mode in which we'll handle errors in async
	  folder reloads.
	* thunar/thunar-local-file.c: Drop the cached MIME type whenever the
	  file changes. The MIME type will be recalculated on demand when
	  needed.
	* thunar/thunar-icon-factory.c: Instead of binding to the icon theme
	  instance's "changed" signal and risking that somebody else already
	  registered a handler earlier, we use a signal emission hook now, which
	  is garantied to be fired before any of the signal handlers are
	  invoked. See the code for details and additional comments.

2005-06-20	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-local-file.h: Add missing THUNAR_LOCAL_FILE_GET_CLASS().
	* configure.in.in: Add checks for kqueue() and required headers.
	* thunar-vfs/thunar-vfs-info.{c,h}: thunar_vfs_info_update() is now
	  part of the public API as it's used by monitor and will be used
	  by the ThunarLocalFile implementation later as well.
	* thunar-vfs/thunar-vfs-monitor.{c,h}: Add implementation for most
	  of the ThunarVfsMonitor. The current implementation uses kqueue()
	  if available with a fallback to regular polling.

2005-06-20	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-list-model.c: Instead of resolving the ids for the
	  "destroy" and "changed" signals on ThunarFile everytime we need to
	  register it, we query the signal id in the constructor and remember
	  it. In addition, instead of creating a closure for every signal
	  registration on a ThunarFile, we create a closure for "changed" and
	  a closure for "destroy" in the constructor and reuse that closure
	  everytime we need to register a signal handler.
	* thunar/thunar-list-model.c: Watch hidden files for "destroy" condition
	  as well.
	* thunar/thunar-trash-file.c: Emit the "changed" signal whenever the
	  "empty" property on the trash manager changes.
	* thunar/thunar-file.{c,h}: Add a method thunar_file_changed(), which
	  is used by derived classes to emit the "changed" signal on a given
	  ThunarFile.

2005-06-19	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-trash.{c,h}: Import first implementation of a
	  trash manager into thunar-vfs. Does currently only support the "home
	  trash", but will be extended to use the volume manager in order to
	  support foreign trashes as well.
	* thunar-vfs/Makefile.am: Add the trash manager to the build framework.
	* thunar-vfs/thunar-vfs.h: Include the trash manager header.
	* thunar/thunar-trash-file.c: Make use of the experimental trash
	  manager to display the proper icon depending on whether the trash
	  is full or empty.

2005-06-19	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-statusbar.c, thunar/thunar-list-model.c,
	  thunar/thunar-favourites-model.c: Fix bug, where Thunar crashed when
	  NULL was returned for a mime info.
	* thunar/thunar-file.{c,h}: Turn this into an abstract base class, which
	  can be implemented in different ways.
	* thunar/thunar-local-file.{c,h}: Implementation of the abstract
	  ThunarFile class for local files handled by the 'file:///' URI
	  scheme.
	* thunar/thunar-trash-file.{c,h}: Implementation of the abstract
	  ThunarFile class for trashed files handled by the 'trash:///' URI
	  scheme and the trash can itself. This is currently only a boilerplate
	  and waiting for the trash backend to show up.
	* thunar/Makefile.am: Add new classes to the build framework.

2005-06-17	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-details-view.c(thunar_details_view_init): Use the
	  ellipsizing text renderer for the name column and get the sizing
	  correct.

2005-06-17	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-view.{c,h}: Further improve the interface to ease the
	  implementation and reduce the amount of duplicated code in the view
	  implementations.
	* thunar/thunar-details-view.{c,h}: Add a first implementation for a
	  details view.
	* thunar/thunar-icon-view.c: Catch up with the changes to ThunarView.
	* thunar/thunar-window.c: Test the new ThunarDetailsView.
	* thunar/Makefile.am: Add ThunarDetailsView class to the build
	  framework.

2005-06-17	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-view.{c,h}: Adjust the interface for views to be more
	  like the FilerView interface, which makes things slightly easier and
	  adds more flexibility for the statusbar. Also the "list-model"
	  property is now named "model", which is the easiest way for both
	  ExoIconView and GtkTreeView, and it's safe to name it that way, as
	  the ThunarView interface is the only way to change models anyways.
	* thunar/thunar-list-model.{c,h}: Drop the statusbar text generator.
	  It's now handled completely within the ThunarStatusbar class, which
	  provides more flexibility.
	* thunar/thunar-statusbar.{c,h}: Each statusbar instance is now
	  associated with a ThunarView instance and automatically updates the
	  status text according to the view.
	* thunar/thunar-icon-view.c: Implement modified ThunarView interface,
	  which makes things very easy here for now.
	* thunar/thunar-window.c: Catch up with the changes to the other
	  classes.

2005-06-15	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-icon-factory.c: Implement the recently used list using
	  a circular buffer. This saves us from having to memmove() the list
	  content on every icon lookup.
	* thunar/thunar-window.c(thunar_window_set_current_directory): Use
	  a simple optimization when loading new folders into a view. See the
	  code comments for details about the trick.

2005-06-14	Benedikt Meurer <benny@xfce.org>

	* configure.in.in: Depend on GLib 2.6 for now.

2005-06-14	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-volume-sysv.{c,h}: Add no-op implementation
	  to make it possible to compile Thunar on non-BSD systems again.
	* configure.in.in, thunar-vfs/Makefile.am,
	  thunar-vfs/thunar-vfs-volume.c, thunar-vfs/thunar-vfs-volume-bsd.c:
	  Add a rather hacky way to support different system flavours based
	  on AC_CONFIG_LINKS(). Needs to be replaced by a real solution at
	  some time.
	* TODO: Add note about the wacky AC_CONFIG_LINKS() hacks mentioned
	  above.

2005-06-14	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-uri.c(thunar_vfs_uri_new_for_path): Add some
	  code to automatically remove trailing slashes from path names, which
	  would otherwise confuse the whole file manager.
	* thunar/thunar-fallback-icon.{h,png}, thunar/Makefile.am: The fallback
	  icon is now stored in a C file and automatically generated at compile
	  time if maintainer mode is enabled, while dist tarballs will ship the
	  generated C file.
	* thunar/thunar-icon-factory.{c,h}: Add new class ThunarIconFactory,
	  which provides caching of themed icons. The basic concept is based
	  on the NautilusIconFactory class, but the implementation is simpler
	  and faster than the implementation found in Nautilus.
	* thunar/thunar-file.c: Use the new ThunarIconFactory class and the
	  new exo_mime_info_lookup_icon_name() method to lookup and cache icons
	  for files. This speeds up folder loading quite a lot.
	* docs/design/overview.xmi: Add ThunarIconFactory diagram.

2005-06-13	Benedikt Meurer <benny@xfce.org>

	* configure.in.in: Add header checks required for the BSD volume
	  manager implementation.
	* thunar/thunar-window.c: Display the current folder's special name.
	* thunar/thunar-file.{c,h}: Add property "special-name", which contains
	  the special name of a given file if any, else it contains the same
	  value as the "display-name" property.
	* thunar/thunar-location-buttons.c: Use the home directory as root.
	  Don't display a label for the 'Filesystem' node, similar to how it
	  is done with GtkFileChooser.
	* thunar-vfs/thunar-vfs-volume.{c,h},
	  thunar-vfs/thunar-vfs-volume-bsd.c: Try more advanced features, like
	  detecting whether a medium is present for a given volume. This is
	  currently just testing, based on what is provided by the BSD
	  interface. The final design may look different, maybe even a
	  D-BUS based thunar-volume-manager service, which can be run with
	  special permissions in order to be able to query device stats and
	  mount volumes.
	* thunar/thunar-favourites-model.c: Use the new features provided by
	  the volume manager to dynamically display volumes when a medium is
	  inserted.

2005-06-12	Benedikt Meurer <benny@xfce.org>

	* docs/design/overview.xmi: Refined the basic ideas for the volume
	  manager, which will provide core functionality required by the
	  trash system. The ThunarVfsVolume and ThunarVfsVolumeManager concepts
	  are interfaces now, which will be implemented by the backend (usually
	  one backend per operating system family).
	* tests/data/test-thunar-vfs-volume-bsd.fstab, tests/data/Makefile.am,
	  tests/test-thunar-vfs-volume-bsd.c, tests/Makefile.am: Add test case
	  for the BSD specific implementation of the ThunarVfsVolumeManager
	  module.
	* tests/test-thunar-vfs-uri.c: Fix copyright and includes.
	* TODO: Add item about possible improvements of the BSD specific
	  volume manager implementation.
	* thunar-vfs/Makefile.am, thunar-vfs/thunar-vfs.h, configure.in.in: Add
	  new classes and interfaces to the build framework.
	* thunar-vfs/thunar-vfs-volume.{c,h}: Import the basic interfaces to
	  the volume manager module, with a minimum set of methods and signals,
	  which will be extended later.
	* thunar-vfs/thunar-vfs-volume-bsd.{c,h}: Add first try of an
	  implementation of the the volume manager interfaces for BSD systems.

2005-06-11	Benedikt Meurer <benny@xfce.org>

	* docs/design/overview.xmi: Extend the ThunarVfsURI functionality.
	* thunar-vfs/thunar-vfs-uri.{c,h}: Add host handling to ThunarVfsURI.
	  Add support for different URI schemes, currently 'file://' and
	  'trash://'.
	* thunar/thunar-favourites-model.c, thunar/thunar-favourites-view.c, 
	  thunar/thunar-location-buttons.c: Sync with the little API change
	  to ThunarVfsURI.
	* tests/Makefile.am: Delete core files on `make clean'.
	* tests/test-thunar-vfs-uri.c(main): Add test cases for the trash:
	  scheme.

2005-06-11	Benedikt Meurer <benny@xfce.org>

	* configure.in.in, Makefile.am, tests/: Import first test program for
	  ThunarVfsURI validation.

2005-06-11	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-uri.{c,h}: Add functions to ease the handling
	  of URI lists, specifically to automatically parse and generate
	  string representations of URI lists that conform to the
	  text/uri-list mime type.
	* thunar/thunar-location-buttons.c
	  (thunar_location_buttons_drag_data_get): Use new ThunarVfsURI list
	  handling functions instead.
	* thunar/thunar-favourites-model.c
	  (thunar_favourites_model_file_destroy): Handle the case where a
	  directory referenced by a favourite disappears from the backend media.
	* thunar/thunar-favourites-model.c
	  (thunar_favourites_model_file_changed): Remove a given favourite if
	  the system notices that the favourite's file no longer refers to a
	  directory.
	* thunar/thunar-favourites-model.c(thunar_favourites_model_init): Do
	  not re-add favourites initially, that do not refer to a directory.
	* thunar/thunar-favourites-model.{c,h}: Add a new method
	  thunar_favourites_model_add(), which is used by the
	  ThunarFavouritesView to add new favourites to the list and
	  automatically sync the changes with the Gtk+ bookmarks list.
	* thunar/thunar-favourites-view.c: Handle "text/uri-list" drops,
	  adding new favourites as appropriate. Add note, that the initial
	  idea is based on the GtkFileChooser written by Red Hat for Gtk+.
	* TODO: Remove the 'text/uri-list'-handling for ThunarFavouritesView.
	  Add item concerning the Trash in the favourites list.

2005-06-10	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-favourites-model.{c,h},
	  thunar/thunar-favourites-view.c: Add initial drag&drop-support for
	  the favourites view. This is currently limited to rearranging
	  favourites in the list. Support for adding new favourites by
	  dropping text/uri-list's will be added soon. Also, the
	  ThunarFavouritesModel also saves changes made by the user back to
	  the .gtk-bookmarks file now.
	* TODO: Add note about missing text/uri-list support in
	  ThunarFavouritesView, and missing .gtk-bookmarks monitor support.

2005-06-08	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-favourites-model.c: Use a signed gint for the number
	  of favourites to be compatible with the Gtk+ API.

2005-06-08	Benedikt Meurer <benny@xfce.org>

	* autogen.sh: Better determine the file dynamically, which is used to
	  query the sandbox revision.

2005-06-08	Benedikt Meurer <benny@xfce.org>

	* autogen.sh, configure.in.in: Add build number to the version during
	  development.

2005-06-08	Benedikt Meurer <benny@xfce.org>

	* docs/design/overview.xmi: All navigational UI elements in a
	  ThunarWindow now implement the ThunarNavigator interface, which
	  defines the "current-directory" property and the "change-directory"
	  signal. See the ThunarNavigator gtk-docs for details about the
	  behaviour.
	* thunar/thunar-navigator.{h,c}: Provide source code for the current
	  ThunarNavigator interface.
	* thunar/thunar-side-pane.{h,c}, thunar/thunar-favourites-pane.c:
	  Changed to use ThunarNavigator instead. ThunarSidePane is currently
	  an empty interface.
	* thunar-vfs/thunar-vfs-uri.{h,c}: Add a thunar_vfs_uri_to_string()
	  method, which transform a ThunarVfsURI into a file:// uri.
	* thunar/thunar-location-bar.{h,c}: Provide source code for the
	  ThunarLocationBar interface, which extends the ThunarNavigator
	  interface. The ThunarLocationBar interface does not add anything new
	  currently, but that will change in future revisions.
	* thunar/thunar-location-buttons.{c,h}: Add location path buttons
	  implementation of the ThunarLocationBar interface. The layouting
	  code was mostly copied from gtkpathbar.c, which was initially
	  written by Jonathan Blandford. The implementation is not complete
	  yet, and the layouting code is still very buggy.
	* TODO: Add a bunch of TODO items for Thunar 1.0.

2005-06-07	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-list-model.c(thunar_list_model_set_folder): Fix a bug
	  where the signals for the ThunarFolder weren't connected if the
	  folder contained no files initially.
	* thunar/thunar-side-pane.c(thunar_side_pane_class_init): Fix typo in
	  the documentation.
	* thunar/thunar-file.{c,h}: Add new method thunar_file_get_parent() to
	  figure out the parent directory for a given ThunarFile.

2005-06-06	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-uri.c(thunar_vfs_uri_finalize): Use the
	  parent_class variable set by G_DEFINE_TYPE instead of dynamically
	  querying the parent class on-demand.
	* thunar/thunar-application.c, thunar/thunar-desktop-view.c,
	  thunar/thunar-favourites-model.c, thunar/thunar-favourites-pane.c,
	  thunar/thunar-favourites-view.c, thunar/thunar-file.c,
	  thunar/thunar-folder.c, thunar/thunar-icon-view.c,
	  thunar/thunar-preferences.c, thunar/thunar-statusbar.c,
	  thunar/thunar-window.c: G_DEFINE_TYPE and G_DEFINE_TYPE_WITH_CODE
	  already generate a parent_class variable, so we don't need to do
	  that manually as well. It looks like this was added with GLib 2.4.x
	  and I somehow missed that change. Thanks to Jeff Franks for pointing
	  this out.

2005-06-05	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-uri.c: Fix a bug in the thunar_vfs_uri_parent()
	  and thunar_vfs_uri_relative() methods, where the name attribute of
	  the newly created objects wasn't initialized properly.
	* thunar-vfs/thunar-vfs-uri.c(thunar_vfs_uri_equal): Instead of always
	  comparing the full path of both URIs, a simple optimization was
	  introduced, which checks the basenames first, if they are equal,
	  it'll check whether the dirnames have the same length, and as the
	  last fallback, it'll compare the dirnames char by char. This way we
	  can optimize the common case - with GHashTable - that two URIs
	  differ.

2005-06-05	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-favourites-model.{c,h}: Add new method
	  thunar_favourites_model_file_for_iter() to be able to easily
	  determine the ThunarFile for a given favourite.
	* thunar/thunar-file.c(thunar_file_class_init): Fix a type in the
	  "changed" signal definition.
	* thunar/thunar-file.c(thunar_file_finalize): Fix a bug where the
	  ThunarVfsURI was freed first, and then an attempt was made to remove
	  the ThunarFile from the file_cache using the previously freed
	  ThunarVfsURI as key.
	* thunar/thunar-view.{c,h}: Add the "change-directory" signal, which
	  is emitted by ThunarIconView and ThunarListView whenever the user
	  double clicks a folder (or otherwise requests a directory change
	  from within the view).
	* thunar/thunar-list-model.{c,h}: Add a thunar_list_model_new()
	  default constructor, which does not take a ThunarFolder instance.
	* thunar/thunar-icon-view.c: Implement the "change-directory" signal
	  in ThunarView.
	* thunar/thunar-favourites-view.c, thunar/thunar-favourites-pane.c:
	  Double-clicking a favourite now opens the associated directory (using
	  the "current-directory" property, which is linked to the
	  "current-directory" property of ThunarWindow).
	* thunar/thunar-window.{c,h}: Add a "current-directory" property,
	  which describes the directory currently displayed in this window.
	  Remove the thunar_window_new_with_folder() constructor and replace
	  it by a default constructor. Automatically synchronize the current
	  directory with both the view and the side pane.
	* thunar/main.c(main): ThunarWindow now uses ThunarFile to refer to
	  the active directory and so we do here as well.

2005-06-05	Benedikt Meurer <benny@xfce.org>

	* configure.in.in: Bumped version to 0.0.2.
	* docs/design/overview.xmi: Fix some issues, see the code changes
	  below.
	* thunar-vfs/Makefile.am: Don't install the thunar-vfs library for
	  now. Makes debugging easier.
	* thunar/Makefile.am: Add new classes to the build framework.
	* thunar/thunar-view.{c,h}: Implement first draft for the ThunarView
	  interface, which is to beimplemented by all views.
	* thunar/thunar-icon-view.{c,h}: Implement first draft for the
	  ThunarIconView class, which implements the ThunarView interface to
	  provide an icon view of the current folder.
	* thunar/thunar-statusbar.{c,h}: Add basic implementation of the
	  ThunarStatusbar class. In order to avoid an association between the
	  ThunarView or ThunarListModel classes and the ThunarStatusbar and in
	  order to provide more flexibility about what is to be displayed in
	  the statusbar, we use a write-only property "text" for the
	  ThunarStatusbar, which can be connected to another string property
	  using the ExoBindings module.
	* thunar/thunar-list-model.{c,h}: The number of rows should be a gint
	  rather than a guint, as that's what GtkTreeModel uses. Add a new
	  method thunar_list_model_get_statusbar_text(), that will be used by
	  both ThunarIconView and ThunarListView to determine the proper
	  statusbar text that should be displayed for a given selection. Add a
	  new column THUNAR_LIST_MODEL_COLUMN_TYPE, which provides a string
	  representation of the MIME-Type (using the comment set for the
	  MIME-Type). The sort function is not yet implemented tho.

2005-06-05	Benedikt Meurer <benny@xfce.org>

	* thunar/thunar-favourites-model.c(thunar_favourites_model_get_value):
	  The display_name's of ThunarFile's can be considered static (as the
	  name cannot change during the ThunarFile's life-time), so we don't
	  need to take a copy here.
	* thunar/thunar-list-model.c(thunar_list_model_get_value): Same here,
	  the ThunarFile's display_name is static.
	* thunar/thunar-file.c: Add the simple caching on the ThunarFile
	  level. If a ThunarFile for the same ThunarVfsURI is requested
	  multiple times, the same ThunarFile instance will be used, instead
	  of allocating a new one. Future versions will extend this scheme
	  using a smarter caching mechanism.
	* thunar/thunar-side-pane.{c,h}: Add implementation for the
	  ThunarSidePane interface, which is to be implemented by all widgets
	  that can be placed on the right side. The interface currently
	  includes only the "current-directory" property, which is the most
	  important communication mechanism. We'll need some way to pass in
	  other per-window settings here (e.g. "show-hidden" and such).
	  Hopefully somebody will pick up the preferences task soon.
	* thunar/thunar-favourites-model.{c,h},
	  thunar/thunar-favourites-view.{c,h},
	  thunar/thunar-favourites-pane.{c,h}: More work on the
	  ThunarFavourites module. The ThunarFavouritesPane class implements
	  the ThunarSidePane interface and acts as a bridge to the underlying
	  ThunarFavouritesView.
	* thunar/thunar-window.c: Test the new ThunarFavouritesPane class.
	* thunar/Makefile.am: Add the new classes to the build framework.

2005-06-05	Benedikt Meurer <benny@xfce.org>

	* thunar-vfs/thunar-vfs-uri.{c,h}: Add thunar_vfs_uri_new()
	  constructor, that creates a new ThunarVfsURI object from a resource
	  identifier string.
	* thunar-vfs/thunar-vfs-uri.{c,h}: Add thunar_vfs_uri_is_home(), which
	  determines whether a given ThunarVfsURI referes to the home
	  directory of the current user.
	* thunar/thunar-file.c(thunar_file_load_icon): Pay attention to
	  special icons for the home folder and the file system root.
	* thunar/thunar-favourites-model.{c,h},
	  thunar/thunar-favourites-view.{c,h}: Add experimental
	  ThunarFavouritesModel and ThunarFavouritesView classes, that will be
	  used in the implementation of the ThunarFavouritesPane class. Other
	  than with the mockups, I've skipped the 'Desktop' favourite for now,
	  as it does not make much sense. The usablity team should evaluate
	  this at some time.
	* thunar/thunar-window.c: Add ThunarFavouritesView on the left side
	  for testing.
	* thunar/Makefile.am: Add ThunarFavouritesModel and
	  ThunarFavouritesView to the build system.

2005-06-04	Benedikt Meurer <benny@xfce.org>

	* configure.in.in: Fix copyright texts.
	* docs/design/overview.xmi: Add is_local() and is_root() for
	  ThunarVfsURI, which were missing.
	* thunar-vfs/thunar-vfs-uri.{c,h}: Implemented the missing
	  thunar_vfs_uri_is_root() and thunar_vfs_uri_parent() methods.

2005-06-04	Benedikt Meurer <benny@xfce.org>

	* COPYING.LIB: Add license text for the thunar-vfs library (which is
	  licensed under the LGPL).
	* HACKING: Add information for people that plan to hack on Thunar.
	* AUTHORS: Add Jeff Franks.
	* THANKS: Import the THANKS template.
	* README: Add some basic information about Thunar. Needs more details.
	* docs/design/overview.xmi: Import the current overview diagram for
	  Thunar.
	* Makefile.am, configure.in.in, docs/Makefile.am,
	  docs/design/Makefile.am: Include the docs/ tree with the build
	  framework.
	* configure.in.in, thunar/Makefile.am, thunar-vfs/Makefile.am: Link
	  against GThread (not yet required from what is coded so far).
	* configure.in.in: Check for several required header files.
	* thunar-vfs/Makefile.am, thunar-vfs/thunar-vfs-info.{c,h},
	  thunar-vfs/thunar-vfs-monitor.{c,h},
	  thunar-vfs/thunar-vfs-uri.{c,h}, thunar-vfs/thunar-vfs-util.{c,h},
	  thunar-vfs/thunar-vfs.h: Add some experimental source code to
	  implement parts of the VFS module.
	* thunar/fallback-icon.h, thunar/fallback-icon.png: Import the
	  fallback icon.
	* thunar/thunar-application.{c,h}: Import Jeff's ThunarApplication
	  boilerplate (adjusting style as required).
	* thunar/thunar-desktop-view.{c,h}: Boilerplate for the
	  ThunarDesktopView class with the very basic requirements.
	* thunar/thunar-file.{c,h}, thunar/thunar-folder.{c,h}: Experimental
	  implementation of ThunarFile and ThunarFolder based on the
	  experimental source for the VFS module.
	* thunar/thunar-list-model.{c,h}: Sample implementation of the
	  ThunarListModel class, based on an earlier implementation found in
	  Filer.
	* thunar/thunar-preferences.{c,h}: Template for the ThunarPreferences
	  class.
	* thunar/thunar-window.{c,h}: Quick-and-dirty ThunarWindow
	  implementation to be able to roughly test the ThunarListModel class.
	* thunar/main.c: Add code to start a single ThunarWindow.
	* autogen.sh: Copyright fixes. Substitute date to make it easier to
	  identify snapshots during the early development stages.

2005-05-30	Benedikt Meurer <benny@xfce.org>

	* Initial import.

# vi:set ts=8 sw=8 noet ai nocindent:
