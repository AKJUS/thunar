Important for Thunar 1.0
========================

 - Use GObject signals for the ThunarVfsJob communication.

 - In thunar_standard_view_selection_changed(), the "Cut file(s)" action
   should only be sensitive if the current folder is writable.

 - We need a way to "refresh" folders after a "Cut"-operation with Nautilus.
   With local folders - with not many files inside - the move is too fast!

 - ThunarVfsURI should have it's own parameter specification, that
   can be used for GValue handling.

 - The ThunarTrashFile constructor needs some rework, as it's currently
   mostly brain-dead. Should probably be splitted into several functions.
   In addition the ThunarTrashFile should enable the monitoring on the
   real file in order to stay informed about changes.

 - The ThunarTrashFolder class should watch the trash manager and the
   trash cans for changes.

 - Use better way to handle system flavours than simply (mis)using
   AC_CONFIG_LINKS(), which is pretty messy for this purpose.

 - Check getmntinfo() or getfsstat() for ThunarVfsVolumeManagerBSD, which
   might be faster than several statfs() calls.

 - ThunarFavouritesModel should include the 'Trash' in the default system
   favourites list, given the user the ability to atleast empty the trash
   by right-clicking on the favourite and choosing 'Empty trash bin' from
   the context menu. An optional, yet tricky feature, would be to allow
   dropping files to the trash bin in the favourites pane (not for 1.0 I'd
   say).

 - ThunarFavouritesModel should watch the .gtk-bookmarks file for changes and
   reload it on-demand (take care of not reloading if the change was caused by
   thunar_favourites_model_save!).

 - The layouting code for ThunarLocationButtons is still buggy. Problem shows
   with paths that include a very long directory; you cannot scroll to the
   last path component then.

 - A design for the ThunarTreePane framework must be developed and later
   be implemented.

 - The trash system details are mostly unclear currently.

 - The preferences must be sorted out and a suggestion for both a good
   set of preferences and a layout for the preferences dialog must be
   developed and presented.

 - A design for the ThunarDesktopView module must be developed and later
   be implemented.

 - We need a suite of unit tests and probably high-level tests, that enable
   us to test parts of the file manager automatically and isolate bugs
   early.

 - View's (and probably models) must be able to add custom actions to
   the ThunarWindow (e.g. 'Empty trash', etc.).

 - The protocol between the view/model and the ThunarWindow must be
   defined and implemented.

 - Setup gtk-doc to present developers with the internal API of Thunar
   to ease development of core modules (and later plugins).

 - Write good user documentation. Must be both precise and complete.

 - Design (UI design this time) the file properties dialog, develop
   a software design and implement it.

 - We need some easy way to manage diagrams and related developer
   information, which also includes results from discussions on
   thunar-dev.

 - The HACKING file must be updated with strict rules about how
   development of Thunar core modules is to be done, and what
   material each developer in addition to the source code.

 - The ThunarVfsMonitor framework must be designed and implemented.
   The list of supported backends for 1.0 is kqueue, fam and
   the stat-thread. Backend technologies must be thread-safe. If
   there's a lot of time or manpower in the end, additional
   backends can be added, as long as they fit into the framework.
